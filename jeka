#!/bin/bash
#
# Script for launching JeKa tool.
#
# Authors: Jerome Angibaud, Patrick Santana
#
# Rules for selecting a JDK :
# - if JEKA_JDK_HOME env var is specified, select it
# - if a jeka.java.version property is specified
#     - if a jeka.jdk.[version] property is specified, select it.
#     - else, look in cache or download the proper JÆ’DK
# - else
#   - if JAVA_HOME env var is specified, select it
#   - else, look in cache and download default version (21)
#
#
# Rules for reading a property (said "my.prop") :
# - if a command line args contains "-Dmy.prop=xxx", returns 'xxx'
# - if an env var 'my.prop' exists, returns this value
# - if property is defined in $BASE_DIR/jeka.properties, returns this value
# - look recursively in $BASE_DIR/../jeka.properties. Stop at first folder ancestor not having a jeka.properties file
# - look in JEKA_USER_HOME/global.properties
#

# Execution time has been benchmarked to 100 ms excluding JAVA command invoke.

set -e

#####################
# Global vars
#####################

declare CMD_LINE_ARGS=("$@")
declare -a INTERPOLATED_ARGS

declare JEKA_VERSION_PROP_NAME="jeka.java.version"
declare JEKA_JAR_NAME="dev.jeka.jeka-core.jar"

declare JEKA_USER_HOME
declare GLOBAL_PROP_FILE
declare BASE_DIR  # To find BASE_DIR/jeka/local.properties, BASE_DIR/jeka/def, ...
declare CURRENT_SCRIPT_DIR
CURRENT_SCRIPT_DIR="$( cd "$(dirname "$0")" ; pwd -P )"

declare DEFAULT_JAVA_VERSION="21"
declare JDK_DOWNLOAD_DISTRIB="temurin"
declare JDK_DOWNLOAD_LIBC_TYPE="glibc"  # default for linux, overridden for other os
declare JDK_DOWNLOAD_FILE_TYPE="tar.gz" # overridden for *WIN os
declare JDK_DOWNLOAD_OS
declare JDK_DOWNLOAD_ARCH

declare RESOLVED_ALIAS # the resolved value of the remote execution argument if started with '@'

declare SHOULD_LOG_DOWNLOAD # we should not log anything when on the green path, except if '-lsu' arg is present

declare LOG_DEBUG # DEBUG
declare DRY_RUN  # Debugging purpose
declare DEFAULT_BASE_DIR="."


#######################################
# Prints passed arguments on the standard stream, only if LOG_DEBUG is non-empty
# Globals:
#   LOG_DEBUG (read)
# Arguments:
#   $*
#######################################
debug() {
  if [ -n "$LOG_DEBUG" ] || [ -n "$SHOULD_LOG_DOWNLOAD" ]; then
    echo "$1" 1>&2
  fi
}

#######################################
# Prints passed arguments on the stderr
# Globals:
#   none
# Arguments:
#   $*
#######################################
msg() {
  echo "$*" 1>&2
}

#######################################
# Gets the sub-string part ending before '#' of a specified string. ('Hello#World' should returns 'Hello')
# Globals:
#   none
# Arguments:
#   $1 : the string to extract substring from
# Outputs:
#   Write extracted sub-string to stdout
#######################################
substring_before_hash() {
    # Extract the substring before '#' using cut
    result=$(echo "$1" | cut -d'#' -f1)

    # Echo the resulting substring
    echo "$result"
}

#######################################
# Gets the sub-string part starting after '#' of a specified string. ('Hello#World' should returns 'World')
# Globals:
#   none
# Arguments:
#   $1 : the string to extract substring from
# Outputs:
#   Write extracted sub-string to stdout
#######################################
substring_after_hash() {
    # Extract the substring after '#' using parameter expansion
    result=${1#*#}

    # If the input string did not have a '#', return empty. Otherwise, return the result
    if [ "$result" == "$1" ]; then
        echo ""
    else
        echo "$result"
    fi
}

#######################################
# Computes if we should print something on console when downloading files
# Globals:
#   CMD_LINE_ARGS (read)
#   SHOULD_LOG_DOWNLOAD (write)
# Arguments:
#   None
#######################################
compute_SHOULD_LOG_DOWNLOAD() {
  for arg in "${CMD_LINE_ARGS[@]}"
    do
      if [ "$arg" == "--verbose" ] || [ "$arg" == "-v" ] || [ "$arg" == "-d" ] || [ "$arg" == "--debug" ]; then
          SHOULD_LOG_DOWNLOAD="true"
          return 0
      fi
    done
}

#######################################
# Download specified zip/tgz file and unpack it to the specified dir
# Globals:
#   none
# Arguments:
#   $1 : url to download file
#   $2 : the target directory path to unzip/unpack content
#   $3 : optional file type to unpack ('zip' or 'tar.gz'). Default is 'zip'.
#######################################
download_and_unpack() {
  local url=$1
  local dir=$2
  local file_type=$3  # 'zip' or 'tar.gz'
  local temp_file
  temp_file=$(mktemp)
  rm "$temp_file"

  ## download
  if [ -x "$(command -v curl)" ]; then
    local silent_flag="s"
    if [ "$SHOULD_LOG_DOWNLOAD" != "" ]; then
      silent_flag=""
    fi
    curl -"$silent_flag"Lf --fail --show-error -o "$temp_file" "$url"
    if [ $? -ne 0 ]; then
        msg "Curl request failed $url"
        msg "Returned code: $?"
        exit 1
    fi
  elif [ -x "$(command -v wget)" ]; then
    wget -q -O "$temp_file" "$url"
  else
    msg "Error: curl or wget not found, please make sure one of them is installed" 1>&2
    exit 1
  fi

  ## unpack
  mkdir -p "$dir"
  if [ "$file_type" == "tar.gz" ]; then
    gzip -cd "$temp_file" | tar xf - -C "$dir"
  else
    unzip -qq -o "$temp_file" -d "$dir"
  fi
  rm "$temp_file"
}

#######################################
# Gets the Jeka directory for the user. This is where are located global.properties and cache dirs.
# Globals:
#   JEKA_USER_HOME (read)
# Arguments:
#   none
# Outputs:
#   Write location to stdout
#######################################
get_jeka_user_home() {
  if [ -z "$JEKA_USER_HOME" ]; then
    echo "$HOME/.jeka"
  else
    echo "$JEKA_USER_HOME"
  fi
}

#######################################
# Gets the effective cache dir for Jeka user
# Globals:
#   JEKA_CACHE_DIR (read)
#   JEKA_USER_HOME (read)
# Arguments:
#   none
# Outputs:
#   Write location to stdout
#######################################
get_cache_dir() {
  if [ -z "$JEKA_CACHE_DIR" ]; then
      echo "$JEKA_USER_HOME/cache"
    else
      echo "$JEKA_CACHE_DIR"
    fi
}

#######################################
# Gets the dir for caching projects cloned from git
# Globals:
#   JEKA_CACHE_DIR (read)
#   JEKA_USER_HOME (read)
# Arguments:
#   none
# Outputs:
#   Write location to stdout
#######################################
get_git_cache_dir() {
  echo "$(get_cache_dir)/git"
}

#######################################
# Gets the value of a property, declared as '-Dprop.name=prop.value' in an array.
# Globals:
#   CMD_LINE_ARGS (read)
# Arguments:
#   $1 : the property name
# Outputs:
#   Write property value to stdout
#######################################
get_system_prop_from_args() {
  local prop_name=$1
  local prefix="-D$prop_name="
  for arg in "${CMD_LINE_ARGS[@]}"
      do
        if [[ "$arg" == "$prefix"* ]] ; then
            echo "${arg#$prefix}"
        fi
      done
}

#######################################
# Gets the value of a property declared within a property file
# Globals:
#   none
# Arguments:
#   $1 : the path of the property file
#   $2 : the property name
# Outputs:
#   Write property value to stdout
#######################################
get_prop_value_from_file() {
    if [ ! -f "$1" ]; then
        return
    fi
    grep "^\\s*${2}=" "${1}" | cut -d'=' -f2
}

#######################################
# Gets the translation of a property name (as my.prop) to an env var name (as MY_PROP)
# Globals:
#   none
# Arguments:
#   $1 : the property name
# Outputs:
#   Write env var name to stdout
#######################################
get_env_var_name() {
  echo "$1" | tr 'a-z.' 'A-Z_'
}

#######################################
# Resolves and returns the value of a property by looking in command line args, env var and jeka.properties files
# Globals:
#   CMD_LINE_ARGS (read)
# Arguments:
#   $1 : the base directory from where looking for jeka.properties file
#   $2 : the property name
# Outputs:
#   Write env var name to stdout
#######################################
get_prop_value_from_base_dir() {
  local base_dir=$1
  local prop_name=$2

  # First look in command line args
  local cmd_args_value
  cmd_args_value="$(get_system_prop_from_args "$prop_name")"
  if [ "$cmd_args_value" != "" ]; then
    echo "$cmd_args_value"
    return 0
  fi

  # Then look in env variables
  local env_value
  env_value=$(printenv "$prop_name")
  if [ "$env_value" != "" ]; then
    echo "$env_value"
    return 0
  fi

  local value
  value=$(get_prop_value_from_file "$base_dir/jeka.properties" "$prop_name")
  if [ -z "$value" ]; then
    local parent_dir="$base_dir/.."
    local parent_jeka_props="$parent_dir/jeka.properties"
    if [ -f "$parent_jeka_props" ]; then
      get_prop_value_from_base_dir "$parent_dir" "$prop_name"
    else
      get_prop_value_from_file "$GLOBAL_PROP_FILE" "$prop_name"
    fi
    return 0
  fi
  echo "$value"
}

#######################################
# Returns the JAVA version to use according properties
# Globals:
#   CMD_LINE_ARGS (read)
#   JEKA_VERSION_PROP_NAME (read)
# Arguments:
#   $1 : the base directory from where looking for jeka.properties file
# Outputs:
#   Write JAVA version to stdout
#######################################
get_java_version_from_props() {
  local base_dir="$1"
  local version
  version=$(get_prop_value_from_base_dir "$base_dir" "$JEKA_VERSION_PROP_NAME")
  local trimmed_version
  trimmed_version=$(echo "$version" | sed 's/ //g')  # remove spaces
  echo "$trimmed_version"
}

#######################################
# Returns the JAVA version to use according properties
# Globals:
#   INTERPOLATED_ARGS (write)
# Arguments:
#   $@ : an array representing the original args
# Outputs:
#   result in INTERPOLATED_ARGS global args
#######################################
compute_INTERPOLATED_ARGS() {
  INTERPOLATED_ARGS=()
  for arg in "$@"; do
    if [[ $arg == ::* ]]; then   # if arg starts with '::'
      local token=${arg:2}
      local prop_name="jeka.cmd.$token"
      local value
      value=$(get_prop_value_from_base_dir "$DEFAULT_BASE_DIR" "$prop_name")
      if [ "$value" != "" ]; then
        local substitute=($value)
        INTERPOLATED_ARGS+=("${substitute[@]}")
      else
        INTERPOLATED_ARGS+=("$arg")
      fi
    else
      INTERPOLATED_ARGS+=("$arg")
    fi
  done
}

#######################################
# Find the index of the remote option in an an array
# Globals:
#   INTERPOLATED_ARGS (write)
# Arguments:
#   $@ : an array representing the original args
# Outputs:
#   result in INTERPOLATED_ARGS global args
#######################################
find_remote_arg_index() {
  index=0
  for arg in "$@"; do
    is_remote_arg "$arg"
    if [ "$result" == "true" ]; then
      echo "$index"
      return 0;
    fi
    ((index++))
  done
  echo "-1";
}

#######################################
# Determines if the passed argument is a remote option (as -r)
# Arguments:
#   $1 : a string representing one argument
# Outputs:
#   result in 'result' global args
#######################################
is_remote_arg() {
  local arg="$1"
  if [[ "$arg" != -* ]]; then
    result="false"
    return 0
  fi
  local option=${arg:1}

  # check if option contains letter 'r' and optionally 'u' or 'p'
  if [[ "$option" == *r* ]] && [[ $option =~ ^(r?u?p?|r?u?p?)$ ]] && [[ ${#option} -le 3 ]]; then
    result="true"
  else
    result="false"
  fi
}

# call `get_jdk_home_from_props base_dir JAVA_VERSION`
get_jdk_home_from_props() {
  local base_dir=$1
  local jdk_version=$2
  local prop_name="jeka.jdk.$jdk_version"
  get_prop_value_from_base_dir "$base_dir" "$prop_name"
}

is_git_url() {
    if [[ $1 =~ ^(https://|ssh://|git://|git@).* ]]; then
        echo "true"
    else
        echo "false"
    fi
}

#######################################
# Returns the dir caching the specified git repo url
# Arguments:
#   $1 : a string representing the git repo url
# Outputs:
#   The dir location
#######################################
giturl_to_foldername() {
    local url=$1
    local trimmed_url
    trimmed_url=$(echo "$url" | sed 's/https:\/\///')
    trimmed_url=$(echo "$trimmed_url" | sed 's/ssh:\/\///')
    trimmed_url=$(echo "$trimmed_url" | sed 's/git:\/\///')
    trimmed_url=$(echo "$trimmed_url" | sed  's/git@//')
    # Extract the repository name from the Git URL using sed and awk
    local folder_name
    folder_name=$(echo "$trimmed_url" | sed 's/\//_/g')
    echo "$folder_name"
}

assert_dir_exits() {
  if [ ! -d "$1" ]; then
    msg "Directory $1 does not exist"
    exit 1
  fi
}

#######################################
# Computes the base directory according the value of '-r' option.
# If the -r refers to a git repo url, then returns the dir where the repo is cloned.
# Global Vars:
#   BASE_DIR (write)
# Arguments:
#   $1 : a string representing a git repo url or a directory path
#   $2 : true/false for updating the cloned repo
# Outputs:
#   result in BASE_DIR global args
#######################################
compute_base_dir_from_resolved_remote_arg() {

  local remote_path="$1"  # file-system path or git url
  local should_clean="$2"
  local is_git_remote
  is_git_remote=$(is_git_url "$remote_path")

  # the remote reference a file-system path
  if [ "false" == "$is_git_remote" ]; then

    if [[ "$remote_path" == /* ]]; then    # absolute path
      result="$remote_path"
      assert_dir_exits "$result"
    else  # relative path
      result="$(pwd)/$remote_arg"
      assert_dir_exits "$result"
      result=$(cd "$result" && pwd)  # normalize pass
    fi
    BASE_DIR="$result"
    return 0
  fi

  ## Remote reference a git repo
  local git_url
  git_url=$(substring_before_hash "$remote_path")
  local git_tag
  git_tag=$(substring_after_hash "$remote_path")
  local branch_args=""
  if [ "$git_tag" != "" ]; then
    branch_args="--branch $git_tag"
  fi
  local cache_dir_name
  cache_dir_name=$(giturl_to_foldername "$remote_path")
  result=$(get_git_cache_dir)/"$cache_dir_name"
  if [ "$should_clean" == "true" ]; then
    rm -rf "$result"
  fi
  if [ ! -d "$result" ]; then
      local quiet_flag="--quiet"
      if [ "$SHOULD_LOG_DOWNLOAD" != "" ]; then
        quiet_flag=""
        debug "Cloning $git_url into $result  ..."
      fi
      git clone $quiet_flag -c advice.detachedHead=false --depth 1 $branch_args "$git_url" "$result"
  else
      debug "Cache directory $result already exists. Won't clone or update."
  fi
  BASE_DIR=$result
}

#######################################
# Computes the base directory according presence or not of -r option
# Arguments:
#   $@ : array representing the interpolated command line
# Outputs:
#   result in BASE_DIR global args
#######################################
compute_BASE_DIR() {
  local -a array=( "$@" )
  local result
  local index
  index=$(find_remote_arg_index "${array[@]}")
  if [ "$index" == "-1" ]; then
    BASE_DIR=$(pwd)
    return 0
  fi
  local option=${array[(($index))]}
  local next_index=$((index + 1))
  local remote_arg=${array[$next_index]}
  local need_update="false"
  if [[ "$option" == *u* ]]; then
    need_update="true"
  fi
  compute_base_dir_from_resolved_remote_arg "$remote_arg" "$need_update"
}

# result is written in JEKA_DIST_DIR
compute_JEKA_DIST_DIR() {
  local base_dir=$1
  local explicit_distrib_dir
  explicit_distrib_dir=$(get_prop_value_from_base_dir "$base_dir" "jeka.distrib.location")
  if [ -n "$explicit_distrib_dir" ]; then
    JEKA_DIST_DIR="$explicit_distrib_dir"
  else
    local jeka_version=
    jeka_version=$(get_prop_value_from_base_dir "$base_dir" "jeka.version")
    if [ -z "$jeka_version" ]; then
      JEKA_DIST_DIR="$CURRENT_SCRIPT_DIR"  # if no version and distrib location specified, use the current script dir
    else
      local distrib_cache_dir
      distrib_cache_dir=$(get_cache_dir)/distributions/$jeka_version
      if [ -d "$distrib_cache_dir" ]; then
        JEKA_DIST_DIR="$distrib_cache_dir"

      else
        # select download repo
        local jeka_repo="https://repo.maven.apache.org/maven2"
        local distrib_repo
        distrib_repo=$(get_prop_value_from_base_dir "$base_dir" "jeka.distrib.repo")
        [ -n "$distrib_repo" ] && jeka_repo=$distrib_repo

        local url=$jeka_repo/dev/jeka/jeka-core/$jeka_version/jeka-core-$jeka_version-distrib.zip
        if [ "$SHOULD_LOG_DOWNLOAD" != "" ]; then
          msg "Download Jeka distrib from $url in $distrib_cache_dir"
        fi
        download_and_unpack "$url" "$distrib_cache_dir"
        JEKA_DIST_DIR=$distrib_cache_dir
      fi
    fi
  fi
}

## Execute Jeka. Call `exec_jeka $base_dir`.
## Returns value in JEKA_CLASSPATH
compute_JEKA_CLASSPATH() {
  local dist_dir=$1

  # If no distrib dir is specified (no jeka.version specified), we look first
  # for jeka-core.jar presence in the same dir of the current script
  if [ -z "$dist_dir" ]; then  ## No jeka.version is specified, should find the local one
    if [ -f "$CURRENT_SCRIPT_DIR/$JEKA_JAR_NAME" ]; then
      dist_dir="$CURRENT_SCRIPT_DIR"
    fi
    if [ -z "$dist_dir" ]; then
      msg "No JeKa distribution found from script location $CURRENT_SCRIPT_DIR."
      msg "You probably forgot to mention a 'jeka.version' or 'jeka.distrib.location' property in jeka.properties file."
      exit 1
    fi
  fi

  local boot_dir_args

  ## Reference to remote found
  if [ "$REMOTE_BASE_DIR" != "" ]; then
    if [ -d "$REMOTE_BASE_DIR/jeka-boot" ]; then
         boot_dir_args="$REMOTE_BASE_DIR/jeka-boot/*:"
    fi

  ## No remote script, launch on current dir
  else
    if [ -d "./jeka-boot" ]; then
       boot_dir_args="./jeka-boot/*:"
    fi
  fi
  local jar_file="$dist_dir/$JEKA_JAR_NAME"
  if [ ! -f "$jar_file" ]; then
    msg "Cannot find JeKa jar file $jar_file."
    msg "Are you sure the JeKa distribution you use is properly packaged ?"
    exit 1
  fi
  JEKA_CLASSPATH="$boot_dir_args$jar_file"
}

# call `get_or_download_jdk $JAVA_VERSION`. The result is set to DOWNLOAD_JDK_DIR var.
get_or_download_jdk() {
  local JAVA_VERSION="$1"
  local specified_distrib
  specified_distrib=$(get_prop_value_from_base_dir "$BASE_DIR" "jeka.java.distrib")
  if [ -n "$specified_distrib" ]; then
    JDK_DOWNLOAD_DISTRIB="$specified_distrib"
  fi
  local jdk_cache_dir
  jdk_cache_dir="$(get_cache_dir)/jdks/$JDK_DOWNLOAD_DISTRIB-$JAVA_VERSION"
  if [ ! -d "$jdk_cache_dir" ]; then
    if [ -z "$JDK_DOWNLOAD_OS" ]; then
      msg "Unable to download JDK, unsupported Operating System: $(uname -s)" 1>&2
      msg "You may workaround this problem by specifying a 'jeka.jdk.$JAVA_VERSION' env var or property in ~/jeka/global.properties file." 1>&2
      exit 1
    fi
    if [ -z "$JDK_DOWNLOAD_ARCH" ]; then
      msg "Unable to download JDK, unsupported Architecture: $(uname -m)" 1>&2
      msg "You may workaround this problem by specifying a 'jeka.jdk.$JAVA_VERSION' env var or property in ~/jeka/global.properties file." 1>&2
      exit 1
    fi
    local download_url="https://api.foojay.io/disco/v3.0/directuris?distro=$JDK_DOWNLOAD_DISTRIB&javafx_bundled=false&libc_type=$JDK_DOWNLOAD_LIBC_TYPE&archive_type=$JDK_DOWNLOAD_FILE_TYPE&operating_system=$JDK_DOWNLOAD_OS&package_type=jdk&version=$JAVA_VERSION&architecture=$JDK_DOWNLOAD_ARCH&latest=available"
    if [ "$SHOULD_LOG_DOWNLOAD" != "" ]; then
      msg "Downloading JKD $JDK_DOWNLOAD_DISTRIB $JAVA_VERSION to $jdk_cache_dir. It may take a while..."
    fi
    download_and_unpack "$download_url" "$jdk_cache_dir" "$JDK_DOWNLOAD_FILE_TYPE"
    if [ "tar.gz" == "$JDK_DOWNLOAD_FILE_TYPE" ]; then
      pushd "$jdk_cache_dir" > /dev/null 2>&1
      local nested_dir
      nested_dir=$(find "." -mindepth 1 -maxdepth 1 -type d | head -n 1 | cut -c 3-)
      popd > /dev/null 2>&1
      temp_dir=$(mktemp -d)
      if [ "$JDK_DOWNLOAD_OS" = "mac" ]; then
          nested_dir+="/Contents/Home"
      fi
      mv "$jdk_cache_dir"/"$nested_dir"/* "$temp_dir"
      mv "$temp_dir"/* "$jdk_cache_dir"
    fi
  fi
  DOWNLOAD_JDK_DIR=$jdk_cache_dir
}

##############################################################
# Script starts here
##############################################################

compute_SHOULD_LOG_DOWNLOAD
JEKA_USER_HOME=$(get_jeka_user_home)
GLOBAL_PROP_FILE="$JEKA_USER_HOME/global.properties"

compute_INTERPOLATED_ARGS "${CMD_LINE_ARGS[@]}"
compute_BASE_DIR "${INTERPOLATED_ARGS[@]}"

# OS specific support.  $var _must_ be set to either true or false.
case "$(uname -s)" in
  Linux*)
    JDK_DOWNLOAD_OS="linux"
    if [ -f /etc/alpine-release ]; then
      JDK_DOWNLOAD_OS=alpine-linux
    fi
    ;;
  Darwin*)
    JDK_DOWNLOAD_OS="mac"
    JDK_DOWNLOAD_LIBC_TYPE="libc"; # necessary to download proper JDK
    ;;
esac

case "$(uname -m)" in
  i?86)
    JDK_DOWNLOAD_ARCH="x32";;
  x86_64|amd64)
    JDK_DOWNLOAD_ARCH="x64";;
  aarch64)
    JDK_DOWNLOAD_ARCH="aarch64";;
  armv7l)
    JDK_DOWNLOAD_ARCH="arm";;
  ppc64le)
    JDK_DOWNLOAD_ARCH="ppc64le";;
  s390x)
    JDK_DOWNLOAD_ARCH="s390x";;
  arm64)
    JDK_DOWNLOAD_ARCH="arm64"
    ;;
  *)
    JDK_DOWNLOAD_ARCH=""
    ;;
esac

# Determines JAVA_HOME
JAVA_VERSION=$(get_java_version_from_props "$BASE_DIR")

if [ -n "$JEKA_JDK_HOME" ]; then # We can enforce usage of a specific JDK by setting JEKA_JDK_HOME env var
  JAVA_HOME="$JEKA_JDK_HOME"

elif [ -n "$JAVA_VERSION" ] || [ -z "$JAVA_HOME" ]; then # if a Java version is specified in then use one of the JeKa managed JDK
  if [ -z "$JAVA_VERSION" ]; then
    JAVA_VERSION=$"$DEFAULT_JAVA_VERSION"
    if [ -n "$SHOULD_LOG_DOWNLOAD" ]; then
      msg "No JAVA_HOME defined and no jeka.java.version defined. Use Java $DEFAULT_JAVA_VERSION."
    fi
  fi
  jdkPath=$(get_jdk_home_from_props "$BASE_DIR" "$JAVA_VERSION")
  debug "JDK HOME $JAVA_VERSION from env or props : $jdkPath "
  if [ -z "$jdkPath" ]; then
    get_or_download_jdk "$JAVA_VERSION"
    JAVA_HOME="$DOWNLOAD_JDK_DIR"
  fi
fi

# Determines JAVA_CMD to use according JAVA_HOME
if [ -z "$JAVA_CMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVA_CMD="$JAVA_HOME/jre/sh/java"
    else
      JAVA_CMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVA_CMD="$(which java)"
  fi
fi

if [ ! -x "$JAVA_CMD" ] ; then
  msg "Error: JAVA_HOME is not defined correctly (valued to $JAVA_HOME )."
  msg "  We cannot execute $JAVA_CMD" >&2
  msg "  You can specify which JDK to use by setting JEKA_JDK environment variable."
  exit 1
fi

## When debugging we don't want to execute Jeka
if [ -z "$DRY_RUN" ]; then
  compute_JEKA_DIST_DIR "$BASE_DIR"
  compute_JEKA_CLASSPATH "$JEKA_DIST_DIR"
  exec "$JAVA_CMD" $JEKA_OPTS "-Djeka.current.basedir=$BASE_DIR" -cp "$JEKA_CLASSPATH" "dev.jeka.core.tool.Main" "$@"
fi
